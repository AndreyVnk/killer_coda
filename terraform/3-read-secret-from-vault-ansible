1. Start Vault in Dev mode

# Start the Vault server in dev mode:
$ vault server -dev &

# Export the values you need:
$ export VAULT_ADDR='http://127.0.0.1:8200'
$ export VAULT_TOKEN="<token>" 	# <token from output>

# Verify that the server is running:
$ vault status

# Verify the open ports for Vault:
$ lsof -i :8200
$ ss -ntulp | grep 820

2. Create a secret

# Verify that the secrets engine v2 is running:
$ vault secrets list -detailed

# Create the vault secret of the username and password for the application:
$ vault kv put secret/app1/values username=secretuser password=supersecure

# Verify that the values have been set:
$ vault kv get secret/app1/values

3. Create a user and a policy to read secret

# Allow vault to use usernames and passwords:
$ vault auth enable userpass

# Create the user for vault:
$ vault write auth/userpass/users/ansible password=ansible12#$

# Create a policy to allow reads of secret/app1/values secret:
$ cat > /root/ansible-policy.hcl <<-EOF
# Write and manage secrets in key-value secrets engine
path "secret*" {
  capabilities = [ "create", "read", "update", "delete", "list", "patch" ]
}
EOF

# Write the vault policy into vault:
$ vault policy write ansible_policy /root/ansible-policy.hcl 

# Map the policy to the user ansible:
$ vault write /auth/userpass/users/ansible policies=ansible_policy

# Verify the mapping of the policy:
$ vault read auth/userpass/users/ansible

4. Setup Ansible Vault and playbook to read secret

# Let's make sure Ansible is installed in our environment:
$ apt -y install ansible

# Create an ansible playbook that can authenticate to vault 
# secret-read.yaml
---
- name: Read variables
  hosts: localhost
  vars:
  gather_facts: True
  become: False
  tasks:


  - name: test my connection to vault for credentials
    uri:
      url: "http://127.0.0.1:8200/v1/auth/userpass/login/{{username}}"
      return_content: yes
      method: POST
      body_format: json
      body: { password : "{{ password }}" }
    register: user_connect

  - name: Debug user_connect
    debug:
      var: user_connect

# Run a test of the playbook with variables at the command line. (This is not secure, but we want to see it run.):
$ ansible-playbook /root/secret-read.yaml --extra-vars "username=ansible password='ansible12#$'"

# Now we'll add those to a vault file:
$ ansible-vault create vault.yaml

# Create a password 'Ansible1234' and the add the lines:
---
username: ansible
password: ansible12#$

# Add the following lines to your playbook
---
- name: Read variables
  hosts: localhost
  vars:
  #Added ----------------
  vars_files:
  - /root/vault.yaml
  # ---------------------
  gather_facts: True
  become: False

# Re-run the playbook and verify the vault is working (you will have to put in the vault password now.):
$ ansible-playbook --ask-vault-pass /root/secret-read.yaml

* Note our token is: user_connect.json.auth.client_token in our json output

# Now we've secured our credentials and we've read the token. Let's add to our playbook and give Vault that token to read the credentials:
# Add this below previous playbook task

  - name: Read the secret
    uri:
      url: "http://127.0.0.1:8200/v1/secret/data/app1/values"
      method: GET
      return_content: yes
      headers:
        X-Vault-Token: "{{ user_connect.json.auth.client_token }}"
    register: secret_creds

  - name: debug the secret_creds 
    debug:
      var: secret_creds
  
# Verify that you can read the data out in the debug output.


